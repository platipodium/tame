{% set domains = ['interior', 'bottom', 'surface'] %}
{% set variable = 'bla' %}
#include "fabm_driver.h"

module {{ model.name }}

   use fabm_types
   implicit none
   private

   type, extends(type_base_model), public :: type_{{ model.name }}

      {% if prognostics %}
      {% if prognostics.interior %}
      {% for variable in prognostics.interior %}
      type(type_state_variable_id) :: id_{{ variable }}
      {% endfor %}
      {% endif %}

      {% if prognostics.bottom %}
      {% for variable in prognostics.bottom %}
      type (type_bottom_state_variable_id)              :: id_{{ variable }}
      {% endfor %}
      {% endif %}

      {% if prognostics.surface %}
      {% for variable in prognostics.surface %}
      type (type_surface_state_variable_id)              :: id_{{ variable }}
      {% endfor %}
      {% endif %}
      {% endif %}
      {% if dependencies %}
      {% if dependencies.interior %}
      {% for variable in dependencies.interior %}
      type (type_dependency_id)              :: id_{{ variable }}
      {% endfor %}
      {% endif %}
      {% if dependencies.bottom %}
      {% for variable in dependencies.bottom %}
      type (type_bottom_dependency_id)              :: id_{{ variable }}
      {% endfor %}
      {% endif %}
      {% if dependencies.surface %}
      {% for variable in dependencies.surface %}
      type (type_surface_dependency_id)              :: id_{{ variable }}
      {% endfor %}
      {% endif %}
      {% endif %}
      {% if diagnostics %}
      {% if diagnostics.interior %}
      {% for variable in diagnostics.interior %}
      type (type_diagnostic_variable_id)              :: id_{{ variable }}
      {% endfor %}
      {% endif %}
      {% if diagnostics.bottom %}
      {% for variable in diagnostics.bottom %}
      type (type_bottom_diagnostic_variable_id)              :: id_{{ variable }}
      {% endfor %}
      {% endif %}
      {% if diagnostics.surface %}
      {% for variable in diagnostics.surface %}
      type (type_surface_diagnostic_variable_id)              :: id_{{ variable }}
      {% endfor %}
      {% endif %}
      {% endif %}

      ! Model parameters
      {% if parameters %}
      {% for parameter in parameters %}
      real(rk) :: {{ parameter }}
      {% endfor %}
      {% endif %}

      real(rk),parameter :: epsilon = 0.00000000001_rk
      real(rk),parameter :: secs_per_day = 86400._rk

   contains
      procedure :: initialize
      {% for domain in domains %}
      {% if domain == 'interior' %}
      procedure :: do
      {% else %}
      procedure :: do_{{ domain }}
      {% endif %}
      {% endfor %}
   end type

contains

subroutine initialize(self,configunit)

   class (type_{{ model.name }}), intent(inout), target :: self
   integer,            intent(in)            :: configunit
   real(rk),parameter                        :: secs_per_day = 86400._rk

   {% if parameters %}
   {% for parameter in parameters %}
   call self%get_parameter(self%{{ parameter }}, '{{ parameter }}', '{{ parameter.description }}', default='{{ parameter.unit }}')
   {% endfor %}
   {% endif %}

   ! Register state variables
   {% if prognostics.interior %}
   {% for variable in prognostics.interior %}
   call self%register_state_variable(self%id_{{ variable }},'{{ variable }}','{{ variable.unit }}', '{{ variable.name }}', minimum={{ variable.minimum }}, vertical_movement=wdz/secs_per_day,no_river_dilution=.true.)
   {% endfor %}

   {% for variable in prognostics.interior %}
   {% if 'contributes-to' in variable %}
   self%add_to_aggregate_variable(standard_variables%total_{{ variable.contributes-to }},   self%id_{{ variable }}, scale_factor=1.0)
   {% endif %}
   {% endfor %}
   {% endif %}

   {% if prognostics.bottom %}
   {% for variable in prognostics.interior %}
   call self%register_bottom_state_variable(self%id_{{ variable }},'{{ variable }}','{{ variable.unit }}', '{{ variable.name }}', minimum={{ variable.minimum }}, vertical_movement=wdz/secs_per_day,no_river_dilution=.true.)
   {% endfor %}
   {% endif %}

   ! Register diagnostic variables
   {% if diagnostics.interior %}
   {% for variable in diagnostics.interior %}
   call self%register_diagnostic_variable(self%id_{{ variable }},'{{ variable }}','{{ variable.unit }}', '{{ variable.description }}', minimum={{ variable.minimum }}, vertical_movement=wdz/secs_per_day,no_river_dilution=.true.)
   {% endfor %}
   {% endif %}

   ! Register environmental dependencies
   call self%register_dependency(self%id_temp, standard_variables%temperature)
   call self%register_dependency(self%id_salt, standard_variables%practical_salinity)
   call self%register_dependency(self%id_wind, standard_variables%wind_speed)
   call self%register_dependency(self%id_taub, standard_variables%bottom_stress)

   end subroutine initialize

{% for domain in domains %}
{% if domain == 'interior' %}{% set postfix = '' %}
{% elif domain == 'bottom' %}{% set postfix = '_bottom' %}
{% else %}{% set postfix = '_surface' %}
{% endif %}
subroutine do{{ postfix }}(self,_ARGUMENTS_DO{{ postfix|upper }}_)
   class(type_{{ model.name }}), INTENT(IN) :: self
   _DECLARE_ARGUMENTS_DO{{ postfix|upper }}_

   {% if prognostics and prognostics.interior %}
   {% for variable in prognostics.interior %}
   real(rk) :: {{ variable }}
   {% endfor %}
   {% endif %}

   {% if dependencies and dependencies.interior %}
   {% for variable in dependencies.interior %}
   real(rk) :: {{ variable }}
   {% endfor %}
   {% endif %}

   _{{ postfix|upper }}LOOP_BEGIN_

      ! Retrieve current (local) state variable values
      {% if prognostics %}
      {% if prognostics.interior %}
      {% for variable in prognostics.interior %}
      _GET{{ postfix|upper }}_(self%id_{{ variable }},{{ variable }})
      {% endfor %}
      {% endif %}
      {% endif %}

      ! Retrieve environment values
      {% if dependencies %}
      {% if dependencies.interior %}
      {% for variable in dependencies.interior %}
      _GET{{ postfix|upper }}_(self%id_{{ variable }},{{ variable }})
      {% endfor %}
      {% endif %}
      {% endif %}

      {% if prognostics %}
      {% if prognostics.interior %}
      {% for variable in prognostics.interior %}
      _ADD_{{ postfix|upper }}SOURCE_(self%id_{{ variable }},0.0_rk)
      {% endfor %}
      {% endif %}
      {% endif %}

      {% if domain != 'interior' %}
      _ADD_{{ postfix|upper }}FLUX_(self%id_{{ variable }},0.0_rk)
      {% endif %}

      {% if diagnostics %}
      {% if diagnostics.interior %}
      {% for variable in diagnostics.interior %}
      _SET_{{ postfix|upper }}DIAGNOSTIC_(self%id_{{ variable }},0.0_rk)
      {% endfor %}
      {% endif %}
      {% endif %}

   _{{ postfix|upper }}LOOP_END_

   end subroutine do{{ postfix}}
{% endfor %}
end module {{ model.name }}
