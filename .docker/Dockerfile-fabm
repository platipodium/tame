# Multistage Dockerfile for development on Alpine linux with gfortran
#
# SPDX-FileContributor: Carsten Lemmen <carsten.lemmen@hereon.de>
# SPDX-FileCopyrightText: 2024-2025 Helmholtz-Zentrum hereon GmbH
# SPDX-License-Identifier: CC0-1.0
#
# Download base image alpine
FROM python:3.11-alpine AS base

LABEL maintainer="carsten.lemmen@hereon.de"
LABEL version="0.1a"
LABEL description="This is a custom Docker image for a development container with FABM-tame and GOTM"
LABEL license="CC0-1.0"
LABEL copyright="2024-2025 Helmholtz-Zentrum hereon GmbH"

# Install a development toolchain based on gnu/openmpi, git and  build tools
RUN apk add --no-cache cmake make bash
RUN apk add --no-cache gcc
RUN apk add --no-cache gfortran
RUN apk add --no-cache g++
RUN apk add --no-cache git
RUN apk add --no-cache netcdf-dev netcdf-fortran-dev

RUN pip install editscenario
RUN pip install matplotlib
RUN pip install gotmgui
CMD ["/bin/bash"]

FROM base AS gotm

ENV GOTM_BASE=/home/gotm
RUN git clone --depth=1 --branch=v6.0.7 --recurse-submodules https://github.com/gotm-model/code.git $GOTM_BASE
RUN mkdir -p $GOTM_BASE/build
RUN mkdir -p /opt
RUN cmake -B $GOTM_BASE/build -S $GOTM_BASE -DCMAKE_INSTALL_PREFIX=/opt -DGOTM_USE_FABM=OFF
RUN make -C $GOTM_BASE/build
RUN make -C $GOTM_BASE/build install
RUN make -C $GOTM_BASE/build install
RUN cp /opt/bin/gotm /opt/bin/gotm-plain
CMD ["/bin/bash"]

# Due to missing implementation of the ieee_arithmetic fortran module on alpine/aarch64,
# we supply the flag -DFABM_USE_IEEE_ARITHMETIC=OFF
FROM gotm AS gotm-fabm
# Build the gotm default host
ENV GOTM_BASE=$GOTM_BASE
RUN cmake -B $GOTM_BASE/build-fabm -S $GOTM_BASE -DCMAKE_INSTALL_PREFIX=/opt -DGOTM_USE_FABM=ON -DFABM_USE_IEEE_ARITHMETIC=OFF
RUN make -C $GOTM_BASE/build-fabm
RUN make -C $GOTM_BASE/build-fabm install
RUN cp /opt/bin/gotm /opt/bin/gotm-fabm
# Also create the 0d model
RUN mkdir -p $GOTM_BASE/build-fabm-0d
RUN cmake -B $GOTM_BASE/build-fabm-0d -S $GOTM_BASE/extern/fabm/src/drivers/0d -DCMAKE_INSTALL_PREFIX=/opt -DGOTM_USE_FABM=ON -DFABM_USE_IEEE_ARITHMETIC=OFF
RUN make -C $GOTM_BASE/build-fabm-0d
RUN make -C $GOTM_BASE/build-fabm-0d install
RUN cp /opt/bin/fabm0d /opt/bin/fabm0d-plain
CMD ["/bin/bash"]

FROM gotm-fabm AS fabm
ENV TAME_BASE=/home/tame
ENV GOTM_BASE=$GOTM_BASE
RUN git clone --depth=1 --recurse-submodules https://github.com/platipodium/tame.git ${TAME_BASE}
RUN cmake --version
RUN cmake -B $GOTM_BASE/build-tame -S $GOTM_BASE -DCMAKE_INSTALL_PREFIX=/opt -DGOTM_USE_FABM=ON -DFABM_USE_IEEE_ARITHMETIC=OFF -DFABM_TAME_BASE=${TAME_BASE}/tame -DFABM_INSTITUTES="gotm;tame"
RUN make -C $GOTM_BASE/build-tame
RUN make -C $GOTM_BASE/build-tame install
# Also create the 0d model
RUN mkdir -p $GOTM_BASE/build-tame-0d
RUN cmake -B $GOTM_BASE/build-tame-0d -S $GOTM_BASE/extern/fabm/src/drivers/0d -DCMAKE_INSTALL_PREFIX=/opt -DGOTM_USE_FABM=ON -DFABM_USE_IEEE_ARITHMETIC=OFF -DFABM_TAME_BASE=${TAME_BASE}/tame -DFABM_INSTITUTES="gotm;tame"
RUN make -C $GOTM_BASE/build-tame-0d
RUN make -C $GOTM_BASE/build-tame-0d install
RUN mv /opt/bin/fabm0d /opt/bin/tame0d
RUN mv /opt/bin/fabm0d-plain /opt/bin/fabm0d
CMD ["ls", "-l", "/opt/bin/*"]
#CMD ["/bin/bash"]

# --- Runtime Stage ---
FROM alpine:edge AS runtime

LABEL maintainer="carsten.lemmen@hereon.de"
LABEL version="0.1a-runtime"
LABEL description="Runtime image for TAME models"
# Consider adding other SPDX/reuse labels if appropriate for this stage

# Install only essential runtime dependencies
# bash is usually present in alpine:edge. Explicitly adding R-core for Rscript.
# wget for get_data.sh. ca-certificates for https.
# netcdf & netcdf-fortran for runtime NetCDF support.
RUN apk add --no-cache bash R-core wget ca-certificates netcdf netcdf-fortran

# Copy compiled model executables from the fabm stage
COPY --from=fabm /opt/bin/gotm-plain /usr/local/bin/gotm-plain
COPY --from=fabm /opt/bin/tame0d /usr/local/bin/tame0d 

# Reminder for user: Check for and COPY necessary shared libraries from /opt/lib 
# if ldd on the executables (in fabm stage) shows custom-compiled shared libs.
# Example:
# COPY --from=fabm /opt/lib/libcustom.so /usr/local/lib/libcustom.so

# Copy the data retrieval and setup scripts
# These scripts will be available for the user to run.
WORKDIR /data_setup
COPY --from=fabm /home/tame/setup/1d-cuxhaven/data/get_data.sh ./get_data.sh
COPY --from=fabm /home/tame/setup/1d-cuxhaven/data/setup_data.R ./setup_data.R

# Setup non-root user (good practice)
RUN addgroup -S appgroup && adduser -S appuser -G appgroup
USER appuser

# Set a working directory for the user
WORKDIR /work

# Default command
CMD ["/bin/bash"]
